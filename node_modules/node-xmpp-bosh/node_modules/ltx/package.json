{
  "name": "ltx",
  "version": "0.1.3",
  "main": "./lib/index",
  "description": "<xml for=\"node.js\">",
  "author": {
    "name": "Stephan Maka"
  },
  "dependencies": {
    "node-expat": ">=1.2.0"
  },
  "repositories": [
    {
      "type": "git",
      "path": "http://github.com/astro/ltx.git"
    }
  ],
  "homepage": "http://github.com/astro/ltx",
  "bugs": "http://github.com/astro/ltx/issues",
  "maintainers": [
    {
      "name": "Astro",
      "email": "astro@spaceboyz.net",
      "url": "http://spaceboyz.net/~astro/"
    }
  ],
  "contributors": [
    {
      "name": "Stephan Maka"
    },
    {
      "name": "Will Fife"
    },
    {
      "name": "Markus Kohlhase"
    }
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engine": "node",
  "devDependencies": {
    "vows": ">=0.5.12"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "readme": "# Less-Than XML\n\n* *Element:* any XML Element\n* Text nodes are Strings\n\n\n## Element traversal\n\n* `Element(name, attrs?)`: constructor\n* `is(name, xmlns?)`: check\n* `getName()`: name without ns prefix\n* `getNS()`: element's xmlns, respects prefixes and searches upwards\n* `findNS(prefix?)`: search for xmlns of a prefix upwards\n* `getChild(name, xmlns?)`: find first child\n* `getChildren(name, xmlns?)`: find all children\n* `getChildByAttr(attr, value, xmlns?)`: find first child by a specific attribute\n* `getChildrenByAttr(attr, value, xmlns?)`: find all children by a specific attribute\n* `getText()`: appends all text nodes recursively\n* `getChildText(name)`: a child's text contents\n* `root()`: uppermost parent in the tree\n* `up()`: parent or self\n\n\n## Element attributes\n\n* `attrs` is an object of the Element's attributes\n* `name` contains optional prefix, colon, name\n* `parent` points to its parent, this should always be consistent with\n  children\n* `children` is an Array of Strings and Elements\n\n## Modifying XML Elements\n\n* `remove(child)`: remove child by reference\n* `remove(name, xmlns)`: remove child by tag name and xmlns\n* `attr(attrName, value?)`: modify or get an attribute's value\n* `text(value?)`: modify or get the inner text\n* `clone()`: clones an element that is detached from the document\n\n## Building XML Elements\n\nThis resembles strophejs a bit.\n\nstrophejs' XML Builder is very convenient for producing XMPP\nstanzas. node-xmpp includes it in a much more primitive way: the\n`c()`, `cnode()` and `t()` methods can be called on any *Element*\nobject, returning the child element.\n\nThis can be confusing: in the end, you will hold the last-added child\nuntil you use `up()`, a getter for the parent. `Connection.send()`\nfirst invokes `tree()` to retrieve the uppermost parent, the XMPP\nstanza, before sending it out the wire.\n\n\n## Destructive manipulation\n\nPlease always make sure `parent` and `children` are consistent. Don't\nappend children of other parents to your own element. We're not\nadoption-safe!\n\n\n## TODO\n\n* More documentation\n* More tests (Using [Vows](http://vowsjs.org/))\n\n",
  "readmeFilename": "README.markdown",
  "_id": "ltx@0.1.3",
  "_from": "ltx@~0.1.2"
}
